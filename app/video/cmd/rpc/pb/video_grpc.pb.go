// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: video.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Videoservice_PublishVideo_FullMethodName         = "/pb.videoservice/publishVideo"
	Videoservice_PublishVideoRollback_FullMethodName = "/pb.videoservice/publishVideoRollback"
	Videoservice_GetVideolsit_FullMethodName         = "/pb.videoservice/getVideolsit"
)

// VideoserviceClient is the client API for Videoservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoserviceClient interface {
	PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error)
	PublishVideoRollback(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error)
	GetVideolsit(ctx context.Context, in *GetVideolistReq, opts ...grpc.CallOption) (*GetVideolistResp, error)
}

type videoserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoserviceClient(cc grpc.ClientConnInterface) VideoserviceClient {
	return &videoserviceClient{cc}
}

func (c *videoserviceClient) PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishVideoResp)
	err := c.cc.Invoke(ctx, Videoservice_PublishVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoserviceClient) PublishVideoRollback(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishVideoResp)
	err := c.cc.Invoke(ctx, Videoservice_PublishVideoRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoserviceClient) GetVideolsit(ctx context.Context, in *GetVideolistReq, opts ...grpc.CallOption) (*GetVideolistResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideolistResp)
	err := c.cc.Invoke(ctx, Videoservice_GetVideolsit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoserviceServer is the server API for Videoservice service.
// All implementations must embed UnimplementedVideoserviceServer
// for forward compatibility
type VideoserviceServer interface {
	PublishVideo(context.Context, *PublishVideoReq) (*PublishVideoResp, error)
	PublishVideoRollback(context.Context, *PublishVideoReq) (*PublishVideoResp, error)
	GetVideolsit(context.Context, *GetVideolistReq) (*GetVideolistResp, error)
	mustEmbedUnimplementedVideoserviceServer()
}

// UnimplementedVideoserviceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoserviceServer struct {
}

func (UnimplementedVideoserviceServer) PublishVideo(context.Context, *PublishVideoReq) (*PublishVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoserviceServer) PublishVideoRollback(context.Context, *PublishVideoReq) (*PublishVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideoRollback not implemented")
}
func (UnimplementedVideoserviceServer) GetVideolsit(context.Context, *GetVideolistReq) (*GetVideolistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideolsit not implemented")
}
func (UnimplementedVideoserviceServer) mustEmbedUnimplementedVideoserviceServer() {}

// UnsafeVideoserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoserviceServer will
// result in compilation errors.
type UnsafeVideoserviceServer interface {
	mustEmbedUnimplementedVideoserviceServer()
}

func RegisterVideoserviceServer(s grpc.ServiceRegistrar, srv VideoserviceServer) {
	s.RegisterService(&Videoservice_ServiceDesc, srv)
}

func _Videoservice_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoserviceServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoservice_PublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoserviceServer).PublishVideo(ctx, req.(*PublishVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videoservice_PublishVideoRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoserviceServer).PublishVideoRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoservice_PublishVideoRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoserviceServer).PublishVideoRollback(ctx, req.(*PublishVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videoservice_GetVideolsit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideolistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoserviceServer).GetVideolsit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoservice_GetVideolsit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoserviceServer).GetVideolsit(ctx, req.(*GetVideolistReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Videoservice_ServiceDesc is the grpc.ServiceDesc for Videoservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Videoservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.videoservice",
	HandlerType: (*VideoserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publishVideo",
			Handler:    _Videoservice_PublishVideo_Handler,
		},
		{
			MethodName: "publishVideoRollback",
			Handler:    _Videoservice_PublishVideoRollback_Handler,
		},
		{
			MethodName: "getVideolsit",
			Handler:    _Videoservice_GetVideolsit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
