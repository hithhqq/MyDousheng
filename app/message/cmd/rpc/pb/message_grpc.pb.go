// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Messageservice_SendMessage_FullMethodName    = "/pb.messageservice/sendMessage"
	Messageservice_GetMessageList_FullMethodName = "/pb.messageservice/getMessageList"
)

// MessageserviceClient is the client API for Messageservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageserviceClient interface {
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
	GetMessageList(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResp, error)
}

type messageserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageserviceClient(cc grpc.ClientConnInterface) MessageserviceClient {
	return &messageserviceClient{cc}
}

func (c *messageserviceClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResp)
	err := c.cc.Invoke(ctx, Messageservice_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageserviceClient) GetMessageList(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesResp)
	err := c.cc.Invoke(ctx, Messageservice_GetMessageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageserviceServer is the server API for Messageservice service.
// All implementations must embed UnimplementedMessageserviceServer
// for forward compatibility
type MessageserviceServer interface {
	SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error)
	GetMessageList(context.Context, *GetMessagesReq) (*GetMessagesResp, error)
	mustEmbedUnimplementedMessageserviceServer()
}

// UnimplementedMessageserviceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageserviceServer struct {
}

func (UnimplementedMessageserviceServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageserviceServer) GetMessageList(context.Context, *GetMessagesReq) (*GetMessagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageList not implemented")
}
func (UnimplementedMessageserviceServer) mustEmbedUnimplementedMessageserviceServer() {}

// UnsafeMessageserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageserviceServer will
// result in compilation errors.
type UnsafeMessageserviceServer interface {
	mustEmbedUnimplementedMessageserviceServer()
}

func RegisterMessageserviceServer(s grpc.ServiceRegistrar, srv MessageserviceServer) {
	s.RegisterService(&Messageservice_ServiceDesc, srv)
}

func _Messageservice_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageserviceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messageservice_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageserviceServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messageservice_GetMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageserviceServer).GetMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messageservice_GetMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageserviceServer).GetMessageList(ctx, req.(*GetMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Messageservice_ServiceDesc is the grpc.ServiceDesc for Messageservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messageservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.messageservice",
	HandlerType: (*MessageserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendMessage",
			Handler:    _Messageservice_SendMessage_Handler,
		},
		{
			MethodName: "getMessageList",
			Handler:    _Messageservice_GetMessageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
