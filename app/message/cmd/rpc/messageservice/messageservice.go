// Code generated by goctl. DO NOT EDIT.
// Source: message.proto

package messageservice

import (
	"context"

	"MyDouSheng/app/message/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetMessagesReq  = pb.GetMessagesReq
	GetMessagesResp = pb.GetMessagesResp
	Message         = pb.Message
	SendMessageReq  = pb.SendMessageReq
	SendMessageResp = pb.SendMessageResp

	Messageservice interface {
		SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
		GetMessageList(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResp, error)
	}

	defaultMessageservice struct {
		cli zrpc.Client
	}
)

func NewMessageservice(cli zrpc.Client) Messageservice {
	return &defaultMessageservice{
		cli: cli,
	}
}

func (m *defaultMessageservice) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	client := pb.NewMessageserviceClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

func (m *defaultMessageservice) GetMessageList(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResp, error) {
	client := pb.NewMessageserviceClient(m.cli.Conn())
	return client.GetMessageList(ctx, in, opts...)
}
