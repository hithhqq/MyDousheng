// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"MyDouSheng/app/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUserInfoReq      = pb.GetUserInfoReq
	GetUserInfoResp     = pb.GetUserInfoResp
	LoginReq            = pb.LoginReq
	LoginResp           = pb.LoginResp
	RegisterReq         = pb.RegisterReq
	RegisterResp        = pb.RegisterResp
	UpdateUserReq       = pb.UpdateUserReq
	UpdateUserResp      = pb.UpdateUserResp
	UpdateWorkCountReq  = pb.UpdateWorkCountReq
	UpdateWorkCountResp = pb.UpdateWorkCountResp
	User                = pb.User
	UserAuth            = pb.UserAuth

	Userservice interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		// rpc generateToken(GenerateTokenReq) returns(GenerateTokenResp);
		UpdateAttention(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		UpdateAttentionRollback(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		UpdateWorkcount(ctx context.Context, in *UpdateWorkCountReq, opts ...grpc.CallOption) (*UpdateWorkCountResp, error)
		UpdateWorkcountRollback(ctx context.Context, in *UpdateWorkCountReq, opts ...grpc.CallOption) (*UpdateWorkCountResp, error)
	}

	defaultUserservice struct {
		cli zrpc.Client
	}
)

func NewUserservice(cli zrpc.Client) Userservice {
	return &defaultUserservice{
		cli: cli,
	}
}

func (m *defaultUserservice) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserserviceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserservice) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserserviceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserservice) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUserserviceClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

// rpc generateToken(GenerateTokenReq) returns(GenerateTokenResp);
func (m *defaultUserservice) UpdateAttention(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := pb.NewUserserviceClient(m.cli.Conn())
	return client.UpdateAttention(ctx, in, opts...)
}

func (m *defaultUserservice) UpdateAttentionRollback(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := pb.NewUserserviceClient(m.cli.Conn())
	return client.UpdateAttentionRollback(ctx, in, opts...)
}

func (m *defaultUserservice) UpdateWorkcount(ctx context.Context, in *UpdateWorkCountReq, opts ...grpc.CallOption) (*UpdateWorkCountResp, error) {
	client := pb.NewUserserviceClient(m.cli.Conn())
	return client.UpdateWorkcount(ctx, in, opts...)
}

func (m *defaultUserservice) UpdateWorkcountRollback(ctx context.Context, in *UpdateWorkCountReq, opts ...grpc.CallOption) (*UpdateWorkCountResp, error) {
	client := pb.NewUserserviceClient(m.cli.Conn())
	return client.UpdateWorkcountRollback(ctx, in, opts...)
}
