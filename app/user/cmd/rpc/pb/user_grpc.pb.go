// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Userservice_Login_FullMethodName                   = "/pb.userservice/login"
	Userservice_Register_FullMethodName                = "/pb.userservice/register"
	Userservice_GetUserInfo_FullMethodName             = "/pb.userservice/getUserInfo"
	Userservice_UpdateAttention_FullMethodName         = "/pb.userservice/updateAttention"
	Userservice_UpdateAttentionRollback_FullMethodName = "/pb.userservice/updateAttentionRollback"
	Userservice_UpdateWorkcount_FullMethodName         = "/pb.userservice/updateWorkcount"
	Userservice_UpdateWorkcountRollback_FullMethodName = "/pb.userservice/updateWorkcountRollback"
)

// UserserviceClient is the client API for Userservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserserviceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	// rpc generateToken(GenerateTokenReq) returns(GenerateTokenResp);
	UpdateAttention(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	UpdateAttentionRollback(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	UpdateWorkcount(ctx context.Context, in *UpdateWorkCountReq, opts ...grpc.CallOption) (*UpdateWorkCountResp, error)
	UpdateWorkcountRollback(ctx context.Context, in *UpdateWorkCountReq, opts ...grpc.CallOption) (*UpdateWorkCountResp, error)
}

type userserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserserviceClient(cc grpc.ClientConnInterface) UserserviceClient {
	return &userserviceClient{cc}
}

func (c *userserviceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Userservice_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Userservice_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, Userservice_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceClient) UpdateAttention(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, Userservice_UpdateAttention_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceClient) UpdateAttentionRollback(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, Userservice_UpdateAttentionRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceClient) UpdateWorkcount(ctx context.Context, in *UpdateWorkCountReq, opts ...grpc.CallOption) (*UpdateWorkCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkCountResp)
	err := c.cc.Invoke(ctx, Userservice_UpdateWorkcount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userserviceClient) UpdateWorkcountRollback(ctx context.Context, in *UpdateWorkCountReq, opts ...grpc.CallOption) (*UpdateWorkCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkCountResp)
	err := c.cc.Invoke(ctx, Userservice_UpdateWorkcountRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserserviceServer is the server API for Userservice service.
// All implementations must embed UnimplementedUserserviceServer
// for forward compatibility
type UserserviceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	// rpc generateToken(GenerateTokenReq) returns(GenerateTokenResp);
	UpdateAttention(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	UpdateAttentionRollback(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	UpdateWorkcount(context.Context, *UpdateWorkCountReq) (*UpdateWorkCountResp, error)
	UpdateWorkcountRollback(context.Context, *UpdateWorkCountReq) (*UpdateWorkCountResp, error)
	mustEmbedUnimplementedUserserviceServer()
}

// UnimplementedUserserviceServer must be embedded to have forward compatible implementations.
type UnimplementedUserserviceServer struct {
}

func (UnimplementedUserserviceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserserviceServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserserviceServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserserviceServer) UpdateAttention(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttention not implemented")
}
func (UnimplementedUserserviceServer) UpdateAttentionRollback(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttentionRollback not implemented")
}
func (UnimplementedUserserviceServer) UpdateWorkcount(context.Context, *UpdateWorkCountReq) (*UpdateWorkCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkcount not implemented")
}
func (UnimplementedUserserviceServer) UpdateWorkcountRollback(context.Context, *UpdateWorkCountReq) (*UpdateWorkCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkcountRollback not implemented")
}
func (UnimplementedUserserviceServer) mustEmbedUnimplementedUserserviceServer() {}

// UnsafeUserserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserserviceServer will
// result in compilation errors.
type UnsafeUserserviceServer interface {
	mustEmbedUnimplementedUserserviceServer()
}

func RegisterUserserviceServer(s grpc.ServiceRegistrar, srv UserserviceServer) {
	s.RegisterService(&Userservice_ServiceDesc, srv)
}

func _Userservice_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserserviceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userservice_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserserviceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userservice_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserserviceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userservice_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserserviceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userservice_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserserviceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userservice_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserserviceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userservice_UpdateAttention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserserviceServer).UpdateAttention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userservice_UpdateAttention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserserviceServer).UpdateAttention(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userservice_UpdateAttentionRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserserviceServer).UpdateAttentionRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userservice_UpdateAttentionRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserserviceServer).UpdateAttentionRollback(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userservice_UpdateWorkcount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserserviceServer).UpdateWorkcount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userservice_UpdateWorkcount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserserviceServer).UpdateWorkcount(ctx, req.(*UpdateWorkCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userservice_UpdateWorkcountRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserserviceServer).UpdateWorkcountRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userservice_UpdateWorkcountRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserserviceServer).UpdateWorkcountRollback(ctx, req.(*UpdateWorkCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Userservice_ServiceDesc is the grpc.ServiceDesc for Userservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userservice",
	HandlerType: (*UserserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _Userservice_Login_Handler,
		},
		{
			MethodName: "register",
			Handler:    _Userservice_Register_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _Userservice_GetUserInfo_Handler,
		},
		{
			MethodName: "updateAttention",
			Handler:    _Userservice_UpdateAttention_Handler,
		},
		{
			MethodName: "updateAttentionRollback",
			Handler:    _Userservice_UpdateAttentionRollback_Handler,
		},
		{
			MethodName: "updateWorkcount",
			Handler:    _Userservice_UpdateWorkcount_Handler,
		},
		{
			MethodName: "updateWorkcountRollback",
			Handler:    _Userservice_UpdateWorkcountRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
