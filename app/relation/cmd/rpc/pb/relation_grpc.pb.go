// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: relation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Relationservice_GetAttention_FullMethodName         = "/pb.relationservice/getAttention"
	Relationservice_GetAttentionRollback_FullMethodName = "/pb.relationservice/getAttentionRollback"
	Relationservice_GetFollowlist_FullMethodName        = "/pb.relationservice/getFollowlist"
	Relationservice_GetFanlist_FullMethodName           = "/pb.relationservice/getFanlist"
	Relationservice_GetFriends_FullMethodName           = "/pb.relationservice/getFriends"
)

// RelationserviceClient is the client API for Relationservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationserviceClient interface {
	GetAttention(ctx context.Context, in *GetAttentionReq, opts ...grpc.CallOption) (*GetAttentionResp, error)
	GetAttentionRollback(ctx context.Context, in *GetAttentionReq, opts ...grpc.CallOption) (*GetAttentionResp, error)
	GetFollowlist(ctx context.Context, in *GetFollowlistReq, opts ...grpc.CallOption) (*GetFollowlistResp, error)
	GetFanlist(ctx context.Context, in *GetFanlistReq, opts ...grpc.CallOption) (*GetFanlistResp, error)
	GetFriends(ctx context.Context, in *GetFriendsReq, opts ...grpc.CallOption) (*GetFriendsResp, error)
}

type relationserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationserviceClient(cc grpc.ClientConnInterface) RelationserviceClient {
	return &relationserviceClient{cc}
}

func (c *relationserviceClient) GetAttention(ctx context.Context, in *GetAttentionReq, opts ...grpc.CallOption) (*GetAttentionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttentionResp)
	err := c.cc.Invoke(ctx, Relationservice_GetAttention_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationserviceClient) GetAttentionRollback(ctx context.Context, in *GetAttentionReq, opts ...grpc.CallOption) (*GetAttentionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttentionResp)
	err := c.cc.Invoke(ctx, Relationservice_GetAttentionRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationserviceClient) GetFollowlist(ctx context.Context, in *GetFollowlistReq, opts ...grpc.CallOption) (*GetFollowlistResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowlistResp)
	err := c.cc.Invoke(ctx, Relationservice_GetFollowlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationserviceClient) GetFanlist(ctx context.Context, in *GetFanlistReq, opts ...grpc.CallOption) (*GetFanlistResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFanlistResp)
	err := c.cc.Invoke(ctx, Relationservice_GetFanlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationserviceClient) GetFriends(ctx context.Context, in *GetFriendsReq, opts ...grpc.CallOption) (*GetFriendsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFriendsResp)
	err := c.cc.Invoke(ctx, Relationservice_GetFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationserviceServer is the server API for Relationservice service.
// All implementations must embed UnimplementedRelationserviceServer
// for forward compatibility
type RelationserviceServer interface {
	GetAttention(context.Context, *GetAttentionReq) (*GetAttentionResp, error)
	GetAttentionRollback(context.Context, *GetAttentionReq) (*GetAttentionResp, error)
	GetFollowlist(context.Context, *GetFollowlistReq) (*GetFollowlistResp, error)
	GetFanlist(context.Context, *GetFanlistReq) (*GetFanlistResp, error)
	GetFriends(context.Context, *GetFriendsReq) (*GetFriendsResp, error)
	mustEmbedUnimplementedRelationserviceServer()
}

// UnimplementedRelationserviceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationserviceServer struct {
}

func (UnimplementedRelationserviceServer) GetAttention(context.Context, *GetAttentionReq) (*GetAttentionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttention not implemented")
}
func (UnimplementedRelationserviceServer) GetAttentionRollback(context.Context, *GetAttentionReq) (*GetAttentionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttentionRollback not implemented")
}
func (UnimplementedRelationserviceServer) GetFollowlist(context.Context, *GetFollowlistReq) (*GetFollowlistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowlist not implemented")
}
func (UnimplementedRelationserviceServer) GetFanlist(context.Context, *GetFanlistReq) (*GetFanlistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFanlist not implemented")
}
func (UnimplementedRelationserviceServer) GetFriends(context.Context, *GetFriendsReq) (*GetFriendsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedRelationserviceServer) mustEmbedUnimplementedRelationserviceServer() {}

// UnsafeRelationserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationserviceServer will
// result in compilation errors.
type UnsafeRelationserviceServer interface {
	mustEmbedUnimplementedRelationserviceServer()
}

func RegisterRelationserviceServer(s grpc.ServiceRegistrar, srv RelationserviceServer) {
	s.RegisterService(&Relationservice_ServiceDesc, srv)
}

func _Relationservice_GetAttention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttentionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationserviceServer).GetAttention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relationservice_GetAttention_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationserviceServer).GetAttention(ctx, req.(*GetAttentionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relationservice_GetAttentionRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttentionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationserviceServer).GetAttentionRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relationservice_GetAttentionRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationserviceServer).GetAttentionRollback(ctx, req.(*GetAttentionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relationservice_GetFollowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowlistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationserviceServer).GetFollowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relationservice_GetFollowlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationserviceServer).GetFollowlist(ctx, req.(*GetFollowlistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relationservice_GetFanlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFanlistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationserviceServer).GetFanlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relationservice_GetFanlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationserviceServer).GetFanlist(ctx, req.(*GetFanlistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relationservice_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationserviceServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relationservice_GetFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationserviceServer).GetFriends(ctx, req.(*GetFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Relationservice_ServiceDesc is the grpc.ServiceDesc for Relationservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relationservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.relationservice",
	HandlerType: (*RelationserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAttention",
			Handler:    _Relationservice_GetAttention_Handler,
		},
		{
			MethodName: "getAttentionRollback",
			Handler:    _Relationservice_GetAttentionRollback_Handler,
		},
		{
			MethodName: "getFollowlist",
			Handler:    _Relationservice_GetFollowlist_Handler,
		},
		{
			MethodName: "getFanlist",
			Handler:    _Relationservice_GetFanlist_Handler,
		},
		{
			MethodName: "getFriends",
			Handler:    _Relationservice_GetFriends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
